// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MENTOR
  COUNSELLOR
  WELLNESS_COORDINATOR
}

// Schema for user
model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  // UID received from firebase
  firebaseUID  String     @unique
  // Name of the user
  name         String?
  // User's Email address
  email        String     @unique
  // User's Display picture link
  photoURL     String?    @default("")
  // User's role within the system
  role         Role       @default(USER)
  // 1-10 : 1 being the lowest, 10 being the highest
  avgSentiment Int        @default(0)
  // EQ Score and Level (Out of 100 - High, Above Average, Average, Needs Improvement)
  eqScore      Int        @default(0)
  eqLevel      String     @default("")
  // Created & updated times
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Mood         Mood[]
  Note         Note[]
  Activity     Activity[]
}

model Mood {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  // Reference to User model
  user      User     @relation(fields: [userId], references: [id])
  mood      String   @default("üòê")
  moodValue Int      @default(0)
  createdAt DateTime @default(now())
}

// To store notes created by the user
model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // Id of the note
  noteId    String   @unique
  // Content of the note
  content   String?
  // Title of the string
  title     String?
  // Is notQe public?
  isPublic  Boolean  @default(false)
  // User to which the file belongs
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  // Created & updated times
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ActivityType {
  JOURNAL
  MEDITATION
  BREATHING
  GAME
  SESSION // e.g. 1:1 session with counsellor
  CHALLENGE // community challenge activity
  CHECKIN // daily check-in / mood report
  RESOURCE_VIEW // user opened a resource
  OTHER
}

model Activity {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation(fields: [userId], references: [id])
  type      ActivityType
  // flexible payload for details: journalId, gameId, technique, steps, score etc.
  metadata  Json?
  // duration in seconds where applicable (meditation, game play, session length)
  duration  Int?         @default(0)
  // optional numeric outcome (score, streakCount, mood change, etc.)
  value     Int?
  // whether the activity completed successfully (e.g., completed meditation)
  success   Boolean?     @default(true)
  createdAt DateTime     @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

model Chat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  user     String
  receiver String
  messages Message[]
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  chatId  String
  userId  String
  message String
  chat    Chat   @relation(fields: [chatId], references: [id])
}
